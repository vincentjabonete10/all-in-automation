/// <reference types="node" />
import 'core-js/modules/web.url';
import { EventEmitter } from 'events';
import type Protocol from 'devtools-protocol';
import type { TraceEvent } from '@tracerbench/trace-event';
import type { HTTPRequest } from 'puppeteer-core/lib/cjs/puppeteer/common/HTTPRequest';
import type { CDPSession } from 'puppeteer-core/lib/cjs/puppeteer/common/Connection';
import type { Page } from 'puppeteer-core/lib/cjs/puppeteer/common/Page';
export interface Trace {
    traceEvents: TraceEvent[];
    frameId?: string;
    loaderId?: string;
    pageUrl?: string;
    traceStart?: number;
    traceEnd?: number;
}
export interface WaitPromise {
    promise: Promise<any>;
    cancel: Function;
}
export default class TraceGatherer extends EventEmitter {
    private _session;
    private _page;
    private _failingFrameLoadIds;
    private _pageLoadDetected;
    private _networkListeners;
    private _frameId?;
    private _loaderId?;
    private _pageUrl?;
    private _networkStatusMonitor;
    private _trace?;
    private _traceStart?;
    private _clickTraceTimeout?;
    private _waitForNetworkIdleEvent;
    private _waitForCPUIdleEvent;
    constructor(_session: CDPSession, _page: Page);
    startTracing(url: string): Promise<void>;
    /**
     * store frame id of frames that are being traced
     */
    onFrameNavigated(msgObj: Protocol.Page.FrameNavigatedEvent): Promise<void>;
    /**
     * once the page load event has fired, we can grab some performance
     * metrics and timing
     */
    onLoadEventFired(): Promise<void>;
    onFrameLoadFail(request: HTTPRequest): void;
    get isTracing(): boolean;
    /**
     * once tracing has finished capture trace logs into memory
     */
    completeTracing(): Promise<void>;
    /**
     * clear tracing states and emit tracingFinished
     */
    finishTracing(): void;
    /**
     * Returns a promise that resolves when the network has been idle (after DCL) for
     * `networkQuietThresholdMs` ms and a method to cancel internal network listeners/timeout.
     * (code from lighthouse source)
     * @param {number} networkQuietThresholdMs
     * @return {{promise: Promise<void>, cancel: function(): void}}
     * @private
     */
    waitForNetworkIdle(session: CDPSession, networkQuietThresholdMs?: number): {
        promise: Promise<void>;
        cancel: Function;
    };
    /**
     * Resolves when there have been no long tasks for at least waitForCPUIdle ms.
     * (code from lighthouse source)
     * @param {number} waitForCPUIdle
     * @return {{promise: Promise<void>, cancel: function(): void}}
     */
    waitForCPUIdle(waitForCPUIdle?: number): {
        promise: Promise<unknown>;
        cancel: Function;
    };
    waitForMaxTimeout(maxWaitForLoadedMs?: number): Promise<() => Promise<void>>;
}
//# sourceMappingURL=trace.d.ts.map